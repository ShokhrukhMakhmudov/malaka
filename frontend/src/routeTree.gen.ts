/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StudentsRouteImport } from './routes/students'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardUsersRouteImport } from './routes/dashboard/users'
import { Route as DashboardStudentsRouteImport } from './routes/dashboard/students'
import { Route as DashboardCoursesIndexRouteImport } from './routes/dashboard/courses/index'
import { Route as DashboardCoursesResultsRouteImport } from './routes/dashboard/courses/results'
import { Route as DashboardCertificatesGenerateRouteImport } from './routes/dashboard/certificates/generate'

const StudentsRoute = StudentsRouteImport.update({
  id: '/students',
  path: '/students',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardUsersRoute = DashboardUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardStudentsRoute = DashboardStudentsRouteImport.update({
  id: '/students',
  path: '/students',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardCoursesIndexRoute = DashboardCoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardCoursesResultsRoute = DashboardCoursesResultsRouteImport.update({
  id: '/courses/results',
  path: '/courses/results',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardCertificatesGenerateRoute =
  DashboardCertificatesGenerateRouteImport.update({
    id: '/certificates/generate',
    path: '/certificates/generate',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/students': typeof StudentsRoute
  '/dashboard/students': typeof DashboardStudentsRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/certificates/generate': typeof DashboardCertificatesGenerateRoute
  '/dashboard/courses/results': typeof DashboardCoursesResultsRoute
  '/dashboard/courses': typeof DashboardCoursesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/students': typeof StudentsRoute
  '/dashboard/students': typeof DashboardStudentsRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/certificates/generate': typeof DashboardCertificatesGenerateRoute
  '/dashboard/courses/results': typeof DashboardCoursesResultsRoute
  '/dashboard/courses': typeof DashboardCoursesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/students': typeof StudentsRoute
  '/dashboard/students': typeof DashboardStudentsRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/certificates/generate': typeof DashboardCertificatesGenerateRoute
  '/dashboard/courses/results': typeof DashboardCoursesResultsRoute
  '/dashboard/courses/': typeof DashboardCoursesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/students'
    | '/dashboard/students'
    | '/dashboard/users'
    | '/dashboard/'
    | '/dashboard/certificates/generate'
    | '/dashboard/courses/results'
    | '/dashboard/courses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/students'
    | '/dashboard/students'
    | '/dashboard/users'
    | '/dashboard'
    | '/dashboard/certificates/generate'
    | '/dashboard/courses/results'
    | '/dashboard/courses'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/students'
    | '/dashboard/students'
    | '/dashboard/users'
    | '/dashboard/'
    | '/dashboard/certificates/generate'
    | '/dashboard/courses/results'
    | '/dashboard/courses/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  StudentsRoute: typeof StudentsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/students': {
      id: '/students'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof StudentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/students': {
      id: '/dashboard/students'
      path: '/students'
      fullPath: '/dashboard/students'
      preLoaderRoute: typeof DashboardStudentsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/courses/': {
      id: '/dashboard/courses/'
      path: '/courses'
      fullPath: '/dashboard/courses'
      preLoaderRoute: typeof DashboardCoursesIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/courses/results': {
      id: '/dashboard/courses/results'
      path: '/courses/results'
      fullPath: '/dashboard/courses/results'
      preLoaderRoute: typeof DashboardCoursesResultsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/certificates/generate': {
      id: '/dashboard/certificates/generate'
      path: '/certificates/generate'
      fullPath: '/dashboard/certificates/generate'
      preLoaderRoute: typeof DashboardCertificatesGenerateRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardStudentsRoute: typeof DashboardStudentsRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardCertificatesGenerateRoute: typeof DashboardCertificatesGenerateRoute
  DashboardCoursesResultsRoute: typeof DashboardCoursesResultsRoute
  DashboardCoursesIndexRoute: typeof DashboardCoursesIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardStudentsRoute: DashboardStudentsRoute,
  DashboardUsersRoute: DashboardUsersRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardCertificatesGenerateRoute: DashboardCertificatesGenerateRoute,
  DashboardCoursesResultsRoute: DashboardCoursesResultsRoute,
  DashboardCoursesIndexRoute: DashboardCoursesIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  StudentsRoute: StudentsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
